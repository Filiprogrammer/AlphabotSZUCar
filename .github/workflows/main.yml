name: CI

on:
  push:
  pull_request:
    types: [opened, reopened]

jobs:
  build_qemu_rpi:
    name: Build QEMU Raspberry Pi
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Cache QEMU Raspberry Pi
        id: qemu-rpi-build
        uses: actions/cache@v2
        with:
          path: qemu_rpi/build/qemu-system-aarch64.xz
          key: ${{ runner.os }}-${{ secrets.CACHE_VERSION }}-${{ hashFiles('qemu_rpi') }}
      - name: Install tools
        if: steps.qemu-rpi-build.outputs.cache-hit != 'true'
        run: |
          sudo apt-get install git libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev ninja-build git
      - name: Build QEMU
        if: steps.qemu-rpi-build.outputs.cache-hit != 'true'
        run: |
          mkdir qemu_rpi/build
          cd qemu_rpi/build
          ../configure --target-list=aarch64-softmmu --static
          make -j$(nproc)
        shell: sh
      - name: Compress QEMU Raspberry Pi
        if: steps.qemu-rpi-build.outputs.cache-hit != 'true'
        run: xz -T $(nproc) qemu_rpi/build/qemu-system-aarch64
        shell: sh
      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: qemu-system-aarch64
          path: qemu_rpi/build/qemu-system-aarch64.xz
  build_rpi_image:
    name: Build Raspberry Pi SD Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Cache Raspberry Pi SD Image
        id: rpi-sd-image
        uses: actions/cache@v2
        with:
          path: rpi/sd_image/raspi_alphabot.tar.xz
          key: ${{ runner.os }}-${{ secrets.CACHE_VERSION }}-${{ hashFiles('rpi') }}
      - name: Setup Docker
        if: steps.rpi-sd-image.outputs.cache-hit != 'true'
        uses: docker-practice/actions-setup-docker@v1
      - name: Install tools
        if: steps.rpi-sd-image.outputs.cache-hit != 'true'
        run: |
          sudo apt-get install kpartx parted
      - name: Build Image
        if: steps.rpi-sd-image.outputs.cache-hit != 'true'
        run: sudo rpi/sd_image/build.sh
        shell: sh
      - name: Compress artifacts
        if: steps.rpi-sd-image.outputs.cache-hit != 'true'
        run: cd rpi/sd_image && tar c raspi_alphabot.img vmlinuz-*-arm64 initrd.img bcm2837-rpi-*.dtb | xz -T $(nproc) > raspi_alphabot.tar.xz
        shell: sh
      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: raspi_alphabot.img
          path: rpi/sd_image/raspi_alphabot.tar.xz
  test_rpi:
    name: Test Raspberry Pi
    needs: [build_qemu_rpi, build_rpi_image]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Download QEMU artifact
        uses: actions/download-artifact@v2
        with:
          name: qemu-system-aarch64
          path: qemu_rpi/build/
      - name: Decompress QEMU artifact
        run: xz --decompress qemu_rpi/build/qemu-system-aarch64.xz
        shell: sh
      - name: Download Raspberry Pi SD Image artifact
        uses: actions/download-artifact@v2
        with:
          name: raspi_alphabot.img
          path: rpi/sd_image/
      - name: Decompress Raspberry Pi SD Image artifact
        run: tar -xf rpi/sd_image/raspi_alphabot.tar.xz -C rpi/sd_image && rm rpi/sd_image/raspi_alphabot.tar.xz
        shell: sh
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.6"
      - name: Install Python modules
        run: pip install colorama
      - name: Run emulator with all tests
        run: |
          chmod +x qemu_rpi/build/qemu-system-aarch64
          python3 emulator_rpi.py --headless --test-all --auto-exit
        shell: sh
  build_positioning_anchor_image:
    name: Build Positioning Anchor Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Cache Positioning Anchor Image
        id: positioning-anchor-image
        uses: actions/cache@v2
        with:
          path: positioning_anchor/.pio/build/pro16MHzatmega328/firmware.hex
          key: ${{ runner.os }}-${{ secrets.CACHE_VERSION }}-${{ hashFiles('positioning_anchor') }}
      - name: Setup Python
        if: steps.positioning-anchor-image.outputs.cache-hit != 'true'
        uses: actions/setup-python@v2
      - name: Install PlatformIO
        if: steps.positioning-anchor-image.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio
      - name: Build Image
        if: steps.positioning-anchor-image.outputs.cache-hit != 'true'
        run: cd positioning_anchor && pio run
        shell: sh
      - name: Archive artifact
        uses: actions/upload-artifact@v2
        with:
          name: positioning_anchor_firmware.hex
          path: positioning_anchor/.pio/build/pro16MHzatmega328/firmware.hex
  build_positioning_tag_image:
    name: Build Positioning Tag Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Cache Positioning Tag Image
        id: positioning-tag-image
        uses: actions/cache@v2
        with:
          path: positioning_tag/.pio/build/pro16MHzatmega328/firmware.hex
          key: ${{ runner.os }}-${{ secrets.CACHE_VERSION }}-${{ hashFiles('positioning_tag') }}
      - name: Setup Python
        if: steps.positioning-tag-image.outputs.cache-hit != 'true'
        uses: actions/setup-python@v2
      - name: Install PlatformIO
        if: steps.positioning-tag-image.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio
      - name: Build Image
        if: steps.positioning-tag-image.outputs.cache-hit != 'true'
        run: cd positioning_tag && pio run
        shell: sh
      - name: Archive artifact
        uses: actions/upload-artifact@v2
        with:
          name: positioning_tag_firmware.hex
          path: positioning_tag/.pio/build/pro16MHzatmega328/firmware.hex
  build_esp32_primary_image:
    name: Build ESP32 Primary Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Cache ESP32 Primary Image
        id: esp32-primary-image
        uses: actions/cache@v2
        with:
          path: esp32/PrimaryESP32/.pio/build/esp32dev/firmware.bin
          key: ${{ runner.os }}-${{ secrets.CACHE_VERSION }}-${{ hashFiles('esp32/PrimaryESP32') }}
      - name: Setup Python
        if: steps.esp32-primary-image.outputs.cache-hit != 'true'
        uses: actions/setup-python@v2
      - name: Install PlatformIO
        if: steps.esp32-primary-image.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio
      - name: Build Image
        if: steps.esp32-primary-image.outputs.cache-hit != 'true'
        run: cd esp32/PrimaryESP32 && pio run
        shell: sh
      - name: Archive artifact
        uses: actions/upload-artifact@v2
        with:
          name: esp32_primary_firmware.bin
          path: esp32/PrimaryESP32/.pio/build/esp32dev/firmware.bin
  build_esp32_secondary_image:
    name: Build ESP32 Secondary Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Cache ESP32 Secondary Image
        id: esp32-secondary-image
        uses: actions/cache@v2
        with:
          path: esp32/SecondaryESP32/.pio/build/esp32dev/firmware.bin
          key: ${{ runner.os }}-${{ secrets.CACHE_VERSION }}-${{ hashFiles('esp32/SecondaryESP32') }}
      - name: Setup Python
        if: steps.esp32-secondary-image.outputs.cache-hit != 'true'
        uses: actions/setup-python@v2
      - name: Install PlatformIO
        if: steps.esp32-secondary-image.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio
      - name: Build Image
        if: steps.esp32-secondary-image.outputs.cache-hit != 'true'
        run: cd esp32/SecondaryESP32 && pio run
        shell: sh
      - name: Archive artifact
        uses: actions/upload-artifact@v2
        with:
          name: esp32_secondary_firmware.bin
          path: esp32/SecondaryESP32/.pio/build/esp32dev/firmware.bin
