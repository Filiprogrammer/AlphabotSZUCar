name: CI

on:
  push:
  pull_request:
    types: [opened, reopened]

jobs:
  build_qemu_rpi:
    name: Build QEMU Raspberry Pi
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Cache QEMU Raspberry Pi
        id: qemu-rpi-build
        uses: actions/cache@v2
        with:
          path: qemu_rpi/build/qemu-system-aarch64.xz
          key: ${{ runner.os }}-${{ secrets.CACHE_VERSION }}-${{ hashFiles('qemu_rpi') }}
      - name: Install tools
        if: steps.qemu-rpi-build.outputs.cache-hit != 'true'
        run: sudo apt-get install git libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev ninja-build
      - name: Build QEMU
        if: steps.qemu-rpi-build.outputs.cache-hit != 'true'
        run: |
          mkdir qemu_rpi/build
          cd qemu_rpi/build
          ../configure --target-list=aarch64-softmmu --static
          make -j$(nproc)
        shell: sh
      - name: Compress QEMU Raspberry Pi
        if: steps.qemu-rpi-build.outputs.cache-hit != 'true'
        run: xz -T $(nproc) qemu_rpi/build/qemu-system-aarch64
        shell: sh
      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: qemu-system-aarch64
          path: qemu_rpi/build/qemu-system-aarch64.xz
  build_qemu_rpi_windows:
    name: Build QEMU Raspberry Pi for Windows
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Cache QEMU Raspberry Pi for Windows
        id: qemu-rpi-build-win64
        uses: actions/cache@v2
        with:
          path: qemu_rpi/build/qemu-system-aarch64-win64.tar.xz
          key: ${{ runner.os }}-${{ secrets.CACHE_VERSION }}-${{ hashFiles('qemu_rpi') }}
      - name: Install cygwin key and add cygwin sources
        if: steps.qemu-rpi-build-win64.outputs.cache-hit != 'true'
        run: |
          sudo wget https://qemu.weilnetz.de/debian/weilnetz.gpg -P /etc/apt/trusted.gpg.d
          curl -s https://qemu.weilnetz.de/debian/gpg.key | sudo apt-key add -
          echo deb https://qemu.weilnetz.de/debian/ testing contrib | sudo tee /etc/apt/sources.list.d/cygwin.list
        shell: sh
      - name: Install packages
        if: steps.qemu-rpi-build-win64.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends gcc libc6-dev ninja-build bison flex gettext python3-sphinx g++-mingw-w64-x86-64 gcc-mingw-w64-x86-64 mingw-w64-tools mingw64-x86-64-adwaita-icon-theme mingw64-x86-64-cogl mingw64-x86-64-curl mingw64-x86-64-gmp mingw64-x86-64-gnutls mingw64-x86-64-gtk3 mingw64-x86-64-icu mingw64-x86-64-libxml2 mingw64-x86-64-ncurses mingw64-x86-64-sdl2 mingw64-x86-64-usbredir mingw64-x86-64-openssl
        shell: sh
      - name: Patch gversionmacros.h
        if: steps.qemu-rpi-build-win64.outputs.cache-hit != 'true'
        run: |
          sed -e '1h;2,$H;$!d;g' -e 's/#if GLIB_VERSION_MIN_REQUIRED > GLIB_VERSION_CUR_STABLE\n#error "GLIB_VERSION_MIN_REQUIRED must be <= GLIB_VERSION_CUR_STABLE"\n#endif\n#if GLIB_VERSION_MAX_ALLOWED < GLIB_VERSION_MIN_REQUIRED\n#error "GLIB_VERSION_MAX_ALLOWED must be >= GLIB_VERSION_MIN_REQUIRED"\n#endif\n#if GLIB_VERSION_MIN_REQUIRED < GLIB_VERSION_2_26\n#error "GLIB_VERSION_MIN_REQUIRED must be >= GLIB_VERSION_2_26"\n#endif//' /usr/x86_64-w64-mingw32/sys-root/mingw/include/glib-2.0/glib/gversionmacros.h > gversionmacros.h_tmp
          sudo mv gversionmacros.h_tmp /usr/x86_64-w64-mingw32/sys-root/mingw/include/glib-2.0/glib/gversionmacros.h
        shell: sh
      - name: Patch configure script
        if: steps.qemu-rpi-build-win64.outputs.cache-hit != 'true'
        run: |
          sed 's/^    if $pkg_config --atleast-version=$glib_req_ver $i; then//' qemu_rpi/configure | sed -e '1h;2,$H;$!d;g' -e 's/    else\n        error_exit "glib-$glib_req_ver $i is required to compile QEMU"\n    fi//' > configure_tmp
          sudo mv configure_tmp qemu_rpi/configure
          chmod +x qemu_rpi/configure
        shell: sh
      - name: Workaround for buggy cross pkg-config
        if: steps.qemu-rpi-build-win64.outputs.cache-hit != 'true'
        run: |
          printf '#! /bin/sh
          if [ x"${PKG_CONFIG_LIBDIR+set}" = x ]; then
          basename="${0##*/}"
          triplet="${basename%%-pkg-config}"
          multiarch="`dpkg-architecture -t"${triplet}" -qDEB_HOST_MULTIARCH 2>/dev/null`"
          PKG_CONFIG_LIBDIR="/usr/local/${triplet}/lib/pkgconfig"
          PKG_CONFIG_LIBDIR="$PKG_CONFIG_LIBDIR:/usr/local/share/pkgconfig"
          if [ -n "$multiarch" ]; then
          PKG_CONFIG_LIBDIR="/usr/local/lib/${multiarch}/pkgconfig:$PKG_CONFIG_LIBDIR"
          PKG_CONFIG_LIBDIR="$PKG_CONFIG_LIBDIR:/usr/lib/${multiarch}/pkgconfig"
          fi
          PKG_CONFIG_LIBDIR="$PKG_CONFIG_LIBDIR:/usr/${triplet}/lib/pkgconfig"
          PKG_CONFIG_LIBDIR="$PKG_CONFIG_LIBDIR:/usr/share/pkgconfig"
          export PKG_CONFIG_LIBDIR
          fi
          exec pkg-config "$@"
          ' | sudo tee /usr/bin/x86_64-w64-mingw32-pkg-config
        shell: sh
      - name: Create header files for WHPX API
        if: steps.qemu-rpi-build-win64.outputs.cache-hit != 'true'
        run: |
          sudo mkdir -p /usr/x86_64-w64-mingw32/sys-include
          printf '#ifndef _WINHVEMUAPI_H_
          #define _WINHVEMUAPI_H_
          
          #include <apiset.h>
          #include <apisetcconv.h>
          #include <minwindef.h>
          #include <winapifamily.h>
          
          #if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
          
          #include <winhvplatformdefs.h>
          
          typedef union WHV_EMULATOR_STATUS {
              __C89_NAMELESS struct {
                  UINT32 EmulationSuccessful : 1;
                  UINT32 InternalEmulationFailure : 1;
                  UINT32 IoPortCallbackFailed : 1;
                  UINT32 MemoryCallbackFailed : 1;
                  UINT32 TranslateGvaPageCallbackFailed : 1;
                  UINT32 TranslateGvaPageCallbackGpaIsNotAligned : 1;
                  UINT32 GetVirtualProcessorRegistersCallbackFailed : 1;
                  UINT32 SetVirtualProcessorRegistersCallbackFailed : 1;
                  UINT32 InterruptCausedIntercept : 1;
                  UINT32 GuestCannotBeFaulted : 1;
                  UINT32 Reserved : 22;
              };
              UINT32 AsUINT32;
          } WHV_EMULATOR_STATUS;
          
          typedef struct WHV_EMULATOR_MEMORY_ACCESS_INFO {
              WHV_GUEST_PHYSICAL_ADDRESS GpaAddress;
              UINT8 Direction;
              UINT8 AccessSize;
              UINT8 Data[8];
          } WHV_EMULATOR_MEMORY_ACCESS_INFO;
          
          typedef struct WHV_EMULATOR_IO_ACCESS_INFO {
              UINT8 Direction;
              UINT16 Port;
              UINT16 AccessSize;
              UINT32 Data;
          } WHV_EMULATOR_IO_ACCESS_INFO;
          
          typedef HRESULT (CALLBACK *WHV_EMULATOR_IO_PORT_CALLBACK)(VOID *Context, WHV_EMULATOR_IO_ACCESS_INFO *IoAccess);
          typedef HRESULT (CALLBACK *WHV_EMULATOR_MEMORY_CALLBACK)(VOID *Context, WHV_EMULATOR_MEMORY_ACCESS_INFO *MemoryAccess);
          typedef HRESULT (CALLBACK *WHV_EMULATOR_GET_VIRTUAL_PROCESSOR_REGISTERS_CALLBACK)(VOID *Context, const WHV_REGISTER_NAME *RegisterNames, UINT32 RegisterCount, WHV_REGISTER_VALUE *RegisterValues);
          typedef HRESULT (CALLBACK *WHV_EMULATOR_SET_VIRTUAL_PROCESSOR_REGISTERS_CALLBACK)(VOID *Context, const WHV_REGISTER_NAME *RegisterNames, UINT32 RegisterCount, const WHV_REGISTER_VALUE *RegisterValues);
          typedef HRESULT (CALLBACK *WHV_EMULATOR_TRANSLATE_GVA_PAGE_CALLBACK)(VOID *Context, WHV_GUEST_VIRTUAL_ADDRESS Gva, WHV_TRANSLATE_GVA_FLAGS TranslateFlags, WHV_TRANSLATE_GVA_RESULT_CODE *TranslationResult, WHV_GUEST_PHYSICAL_ADDRESS *Gpa);
          
          typedef struct WHV_EMULATOR_CALLBACKS {
              UINT32 Size;
              UINT32 Reserved;
              WHV_EMULATOR_IO_PORT_CALLBACK WHvEmulatorIoPortCallback;
              WHV_EMULATOR_MEMORY_CALLBACK WHvEmulatorMemoryCallback;
              WHV_EMULATOR_GET_VIRTUAL_PROCESSOR_REGISTERS_CALLBACK WHvEmulatorGetVirtualProcessorRegisters;
              WHV_EMULATOR_SET_VIRTUAL_PROCESSOR_REGISTERS_CALLBACK WHvEmulatorSetVirtualProcessorRegisters;
              WHV_EMULATOR_TRANSLATE_GVA_PAGE_CALLBACK WHvEmulatorTranslateGvaPage;
          } WHV_EMULATOR_CALLBACKS;
          
          typedef VOID* WHV_EMULATOR_HANDLE;
          
          #ifdef __cplusplus
          extern "C" {
          #endif
          
          HRESULT WINAPI WHvEmulatorCreateEmulator(const WHV_EMULATOR_CALLBACKS *Callbacks, WHV_EMULATOR_HANDLE *Emulator);
          HRESULT WINAPI WHvEmulatorDestroyEmulator(WHV_EMULATOR_HANDLE Emulator);
          HRESULT WINAPI WHvEmulatorTryIoEmulation(WHV_EMULATOR_HANDLE Emulator, VOID *Context, const WHV_VP_EXIT_CONTEXT *VpContext, const WHV_X64_IO_PORT_ACCESS_CONTEXT *IoInstructionContext, WHV_EMULATOR_STATUS *EmulatorReturnStatus);
          HRESULT WINAPI WHvEmulatorTryMmioEmulation(WHV_EMULATOR_HANDLE Emulator, VOID *Context, const WHV_VP_EXIT_CONTEXT *VpContext, const WHV_MEMORY_ACCESS_CONTEXT *MmioInstructionContext, WHV_EMULATOR_STATUS *EmulatorReturnStatus);
          
          #ifdef __cplusplus
          }
          #endif
          
          #endif
          
          #endif
          ' | sudo tee /usr/x86_64-w64-mingw32/sys-include/WinHvEmulation.h
          printf '#ifndef _WINHVAPI_H_
          #define _WINHVAPI_H_
          
          #include <apiset.h>
          #include <apisetcconv.h>
          #include <minwindef.h>
          #include <winapifamily.h>
          
          #if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
          
          #include <winhvplatformdefs.h>
          
          #ifdef __cplusplus
          extern "C" {
          #endif
          
          HRESULT WINAPI WHvGetCapability(WHV_CAPABILITY_CODE CapabilityCode, VOID *CapabilityBuffer, UINT32 CapabilityBufferSizeInBytes, UINT32 *WrittenSizeInBytes);
          HRESULT WINAPI WHvCreatePartition(WHV_PARTITION_HANDLE *Partition);
          HRESULT WINAPI WHvSetupPartition(WHV_PARTITION_HANDLE Partition);
          HRESULT WINAPI WHvResetPartition(WHV_PARTITION_HANDLE Partition);
          HRESULT WINAPI WHvDeletePartition(WHV_PARTITION_HANDLE Partition);
          HRESULT WINAPI WHvGetPartitionProperty(WHV_PARTITION_HANDLE Partition, WHV_PARTITION_PROPERTY_CODE PropertyCode, VOID *PropertyBuffer, UINT32 PropertyBufferSizeInBytes, UINT32 *WrittenSizeInBytes);
          HRESULT WINAPI WHvSetPartitionProperty(WHV_PARTITION_HANDLE Partition, WHV_PARTITION_PROPERTY_CODE PropertyCode, const VOID *PropertyBuffer, UINT32 PropertyBufferSizeInBytes);
          HRESULT WINAPI WHvSuspendPartitionTime(WHV_PARTITION_HANDLE Partition);
          HRESULT WINAPI WHvResumePartitionTime(WHV_PARTITION_HANDLE Partition);
          HRESULT WINAPI WHvMapGpaRange(WHV_PARTITION_HANDLE Partition, VOID *SourceAddress, WHV_GUEST_PHYSICAL_ADDRESS GuestAddress, UINT64 SizeInBytes, WHV_MAP_GPA_RANGE_FLAGS Flags);
          HRESULT WINAPI WHvMapGpaRange2(WHV_PARTITION_HANDLE Partition, HANDLE Process, VOID *SourceAddress, WHV_GUEST_PHYSICAL_ADDRESS GuestAddress, UINT64 SizeInBytes, WHV_MAP_GPA_RANGE_FLAGS Flags);
          HRESULT WINAPI WHvUnmapGpaRange(WHV_PARTITION_HANDLE Partition, WHV_GUEST_PHYSICAL_ADDRESS GuestAddress, UINT64 SizeInBytes);
          HRESULT WINAPI WHvTranslateGva(WHV_PARTITION_HANDLE Partition, UINT32 VpIndex, WHV_GUEST_VIRTUAL_ADDRESS Gva, WHV_TRANSLATE_GVA_FLAGS TranslateFlags, WHV_TRANSLATE_GVA_RESULT *TranslationResult, WHV_GUEST_PHYSICAL_ADDRESS *Gpa);
          HRESULT WINAPI WHvCreateVirtualProcessor(WHV_PARTITION_HANDLE Partition, UINT32 VpIndex, UINT32 Flags);
          HRESULT WINAPI WHvCreateVirtualProcessor2(WHV_PARTITION_HANDLE Partition, UINT32 VpIndex, const WHV_VIRTUAL_PROCESSOR_PROPERTY *Properties, UINT32 PropertyCount);
          HRESULT WINAPI WHvDeleteVirtualProcessor(WHV_PARTITION_HANDLE Partition, UINT32 VpIndex);
          HRESULT WINAPI WHvRunVirtualProcessor(WHV_PARTITION_HANDLE Partition, UINT32 VpIndex, VOID *ExitContext, UINT32 ExitContextSizeInBytes);
          HRESULT WINAPI WHvCancelRunVirtualProcessor(WHV_PARTITION_HANDLE Partition, UINT32 VpIndex, UINT32 Flags);
          HRESULT WINAPI WHvGetVirtualProcessorRegisters(WHV_PARTITION_HANDLE Partition, UINT32 VpIndex, const WHV_REGISTER_NAME *RegisterNames, UINT32 RegisterCount, WHV_REGISTER_VALUE *RegisterValues);
          HRESULT WINAPI WHvSetVirtualProcessorRegisters(WHV_PARTITION_HANDLE Partition, UINT32 VpIndex, const WHV_REGISTER_NAME *RegisterNames, UINT32 RegisterCount, const WHV_REGISTER_VALUE *RegisterValues);
          HRESULT WINAPI WHvGetVirtualProcessorInterruptControllerState(WHV_PARTITION_HANDLE Partition, UINT32 VpIndex, VOID *State, UINT32 StateSize, UINT32 *WrittenSize);
          HRESULT WINAPI WHvSetVirtualProcessorInterruptControllerState(WHV_PARTITION_HANDLE Partition, UINT32 VpIndex, const VOID *State, UINT32 StateSize);
          HRESULT WINAPI WHvRequestInterrupt(WHV_PARTITION_HANDLE Partition, const WHV_INTERRUPT_CONTROL *Interrupt, UINT32 InterruptControlSize);
          HRESULT WINAPI WHvGetVirtualProcessorXsaveState(WHV_PARTITION_HANDLE Partition, UINT32 VpIndex, VOID *Buffer, UINT32 BufferSizeInBytes, UINT32 *BytesWritten);
          HRESULT WINAPI WHvSetVirtualProcessorXsaveState(WHV_PARTITION_HANDLE Partition, UINT32 VpIndex, const VOID *Buffer, UINT32 BufferSizeInBytes);
          HRESULT WINAPI WHvQueryGpaRangeDirtyBitmap(WHV_PARTITION_HANDLE Partition, WHV_GUEST_PHYSICAL_ADDRESS GuestAddress, UINT64 RangeSizeInBytes, UINT64 *Bitmap, UINT32 BitmapSizeInBytes);
          HRESULT WINAPI WHvGetPartitionCounters(WHV_PARTITION_HANDLE Partition, WHV_PARTITION_COUNTER_SET CounterSet, VOID *Buffer, UINT32 BufferSizeInBytes, UINT32 *BytesWritten);
          HRESULT WINAPI WHvGetVirtualProcessorCounters(WHV_PARTITION_HANDLE Partition, UINT32 VpIndex, WHV_PROCESSOR_COUNTER_SET CounterSet, VOID *Buffer, UINT32 BufferSizeInBytes, UINT32 *BytesWritten);
          HRESULT WINAPI WHvGetVirtualProcessorInterruptControllerState2(WHV_PARTITION_HANDLE Partition, UINT32 VpIndex, VOID *State, UINT32 StateSize, UINT32 *WrittenSize);
          HRESULT WINAPI WHvSetVirtualProcessorInterruptControllerState2(WHV_PARTITION_HANDLE Partition, UINT32 VpIndex, const VOID *State, UINT32 StateSize);
          HRESULT WINAPI WHvRegisterPartitionDoorbellEvent(WHV_PARTITION_HANDLE Partition, const WHV_DOORBELL_MATCH_DATA *MatchData, HANDLE EventHandle);
          HRESULT WINAPI WHvUnregisterPartitionDoorbellEvent(WHV_PARTITION_HANDLE Partition, const WHV_DOORBELL_MATCH_DATA *MatchData);
          HRESULT WINAPI WHvAdviseGpaRange(WHV_PARTITION_HANDLE Partition, const WHV_MEMORY_RANGE_ENTRY *GpaRanges, UINT32 GpaRangesCount, WHV_ADVISE_GPA_RANGE_CODE Advice, const VOID *AdviceBuffer, UINT32 AdviceBufferSizeInBytes);
          HRESULT WINAPI WHvReadGpaRange(WHV_PARTITION_HANDLE Partition, UINT32 VpIndex, WHV_GUEST_PHYSICAL_ADDRESS GuestAddress, WHV_ACCESS_GPA_CONTROLS Controls, PVOID Data, UINT32 DataSizeInBytes);
          HRESULT WINAPI WHvWriteGpaRange(WHV_PARTITION_HANDLE Partition, UINT32 VpIndex, WHV_GUEST_PHYSICAL_ADDRESS GuestAddress, WHV_ACCESS_GPA_CONTROLS Controls, const VOID *Data, UINT32 DataSizeInBytes);
          HRESULT WINAPI WHvSignalVirtualProcessorSynicEvent(WHV_PARTITION_HANDLE Partition, WHV_SYNIC_EVENT_PARAMETERS SynicEvent, WINBOOL *NewlySignaled);
          HRESULT WINAPI WHvGetVirtualProcessorState(WHV_PARTITION_HANDLE Partition, UINT32 VpIndex, WHV_VIRTUAL_PROCESSOR_STATE_TYPE StateType, VOID *Buffer, UINT32 BufferSizeInBytes, UINT32 *BytesWritten);
          HRESULT WINAPI WHvSetVirtualProcessorState(WHV_PARTITION_HANDLE Partition, UINT32 VpIndex, WHV_VIRTUAL_PROCESSOR_STATE_TYPE StateType, const VOID *Buffer, UINT32 BufferSizeInBytes);
          HRESULT WINAPI WHvAllocateVpciResource(const GUID *ProviderId, WHV_ALLOCATE_VPCI_RESOURCE_FLAGS Flags, const VOID *ResourceDescriptor, UINT32 ResourceDescriptorSizeInBytes, HANDLE *VpciResource);
          HRESULT WINAPI WHvCreateVpciDevice(WHV_PARTITION_HANDLE Partition, UINT64 LogicalDeviceId, HANDLE VpciResource, WHV_CREATE_VPCI_DEVICE_FLAGS Flags, HANDLE NotificationEventHandle);
          HRESULT WINAPI WHvDeleteVpciDevice(WHV_PARTITION_HANDLE Partition, UINT64 LogicalDeviceId);
          HRESULT WINAPI WHvGetVpciDeviceProperty(WHV_PARTITION_HANDLE Partition, UINT64 LogicalDeviceId, WHV_VPCI_DEVICE_PROPERTY_CODE PropertyCode, VOID *PropertyBuffer, UINT32 PropertyBufferSizeInBytes, UINT32 *WrittenSizeInBytes);
          HRESULT WINAPI WHvGetVpciDeviceNotification(WHV_PARTITION_HANDLE Partition, UINT64 LogicalDeviceId, WHV_VPCI_DEVICE_NOTIFICATION *Notification, UINT32 NotificationSizeInBytes);
          HRESULT WINAPI WHvMapVpciDeviceMmioRanges(WHV_PARTITION_HANDLE Partition, UINT64 LogicalDeviceId, UINT32 *MappingCount, WHV_VPCI_MMIO_MAPPING **Mappings);
          HRESULT WINAPI WHvUnmapVpciDeviceMmioRanges(WHV_PARTITION_HANDLE Partition, UINT64 LogicalDeviceId);
          HRESULT WINAPI WHvSetVpciDevicePowerState(WHV_PARTITION_HANDLE Partition, UINT64 LogicalDeviceId, DEVICE_POWER_STATE PowerState);
          HRESULT WINAPI WHvReadVpciDeviceRegister(WHV_PARTITION_HANDLE Partition, UINT64 LogicalDeviceId, const WHV_VPCI_DEVICE_REGISTER *Register, VOID *Data);
          HRESULT WINAPI WHvWriteVpciDeviceRegister(WHV_PARTITION_HANDLE Partition, UINT64 LogicalDeviceId, const WHV_VPCI_DEVICE_REGISTER *Register, const VOID *Data);
          HRESULT WINAPI WHvMapVpciDeviceInterrupt(WHV_PARTITION_HANDLE Partition, UINT64 LogicalDeviceId, UINT32 Index, UINT32 MessageCount, const WHV_VPCI_INTERRUPT_TARGET *Target, UINT64 *MsiAddress, UINT32 *MsiData);
          HRESULT WINAPI WHvUnmapVpciDeviceInterrupt(WHV_PARTITION_HANDLE Partition, UINT64 LogicalDeviceId, UINT32 Index);
          HRESULT WINAPI WHvRetargetVpciDeviceInterrupt(WHV_PARTITION_HANDLE Partition, UINT64 LogicalDeviceId, UINT64 MsiAddress, UINT32 MsiData, const WHV_VPCI_INTERRUPT_TARGET *Target);
          HRESULT WINAPI WHvRequestVpciDeviceInterrupt(WHV_PARTITION_HANDLE Partition, UINT64 LogicalDeviceId, UINT64 MsiAddress, UINT32 MsiData);
          HRESULT WINAPI WHvGetVpciDeviceInterruptTarget(WHV_PARTITION_HANDLE Partition, UINT64 LogicalDeviceId, UINT32 Index, UINT32 MultiMessageNumber, WHV_VPCI_INTERRUPT_TARGET *Target, UINT32 TargetSizeInBytes, UINT32 *BytesWritten);
          HRESULT WINAPI WHvCreateTrigger(WHV_PARTITION_HANDLE Partition, const WHV_TRIGGER_PARAMETERS *Parameters, WHV_TRIGGER_HANDLE *TriggerHandle, HANDLE *EventHandle);
          HRESULT WINAPI WHvUpdateTriggerParameters(WHV_PARTITION_HANDLE Partition, const WHV_TRIGGER_PARAMETERS *Parameters, WHV_TRIGGER_HANDLE TriggerHandle);
          HRESULT WINAPI WHvDeleteTrigger(WHV_PARTITION_HANDLE Partition, WHV_TRIGGER_HANDLE TriggerHandle);
          HRESULT WINAPI WHvCreateNotificationPort(WHV_PARTITION_HANDLE Partition, const WHV_NOTIFICATION_PORT_PARAMETERS *Parameters, HANDLE EventHandle, WHV_NOTIFICATION_PORT_HANDLE *PortHandle);
          HRESULT WINAPI WHvSetNotificationPortProperty(WHV_PARTITION_HANDLE Partition, WHV_NOTIFICATION_PORT_HANDLE PortHandle, WHV_NOTIFICATION_PORT_PROPERTY_CODE PropertyCode, WHV_NOTIFICATION_PORT_PROPERTY PropertyValue);
          HRESULT WINAPI WHvDeleteNotificationPort(WHV_PARTITION_HANDLE Partition, WHV_NOTIFICATION_PORT_HANDLE PortHandle);
          HRESULT WINAPI WHvPostVirtualProcessorSynicMessage(WHV_PARTITION_HANDLE Partition, UINT32 VpIndex, UINT32 SintIndex, const VOID *Message, UINT32 MessageSizeInBytes);
          HRESULT WINAPI WHvGetVirtualProcessorCpuidOutput(WHV_PARTITION_HANDLE Partition, UINT32 VpIndex, UINT32 Eax, UINT32 Ecx, WHV_CPUID_OUTPUT *CpuidOutput);
          HRESULT WINAPI WHvGetInterruptTargetVpSet(WHV_PARTITION_HANDLE Partition, UINT64 Destination, WHV_INTERRUPT_DESTINATION_MODE DestinationMode, UINT32 *TargetVps, UINT32 VpCount, UINT32 *TargetVpCount);
          HRESULT WINAPI WHvStartPartitionMigration(WHV_PARTITION_HANDLE Partition, HANDLE *MigrationHandle);
          HRESULT WHvCancelPartitionMigration(WHV_PARTITION_HANDLE Partition);
          HRESULT WHvCompletePartitionMigration(WHV_PARTITION_HANDLE Partition);
          HRESULT WINAPI WHvAcceptPartitionMigration(HANDLE MigrationHandle, WHV_PARTITION_HANDLE *Partition);
          
          #ifdef __cplusplus
          }
          #endif
          
          #endif
          
          #endif
          ' | sudo tee /usr/x86_64-w64-mingw32/sys-include/WinHvPlatform.h
        shell: sh
      - name: Build QEMU for Windows
        if: steps.qemu-rpi-build-win64.outputs.cache-hit != 'true'
        run: |
          mkdir qemu_rpi/build
          cd qemu_rpi/build
          ../configure --cross-prefix=x86_64-w64-mingw32- --disable-guest-agent-msi --disable-werror \
            --extra-cflags="-I/usr/x86_64-w64-mingw32/sys-root/mingw/include -I/usr/x86_64-w64-mingw32/sys-root/mingw/include/glib-2.0" \
            --extra-ldflags="-L/usr/x86_64-w64-mingw32/sys-root/mingw/lib" \
            --target-list=aarch64-softmmu
          make
        shell: sh
      - name: Copy all the DLLs
        if: steps.qemu-rpi-build-win64.outputs.cache-hit != 'true'
        run: |
          cd qemu_rpi/build
          cp /usr/lib/gcc/x86_64-w64-mingw32/*-win32/libgcc_s_seh-1.dll .
          cp /usr/lib/gcc/x86_64-w64-mingw32/*-win32/libgomp-1.dll .
          cp /usr/lib/gcc/x86_64-w64-mingw32/*-win32/libssp-0.dll .
          cp /usr/lib/gcc/x86_64-w64-mingw32/*-win32/libstdc++-6.dll .
          cp /usr/x86_64-w64-mingw32/lib/libwinpthread-1.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/iconv.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libatk-1.0-0.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libbz2-1.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libcairo-2.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libcairo-gobject-2.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libcurl-4.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libeay32.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libepoxy-0.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libexpat-1.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libffi-6.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libfontconfig-1.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libfreetype-6.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libgdk-3-0.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libgdk_pixbuf-2.0-0.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libgio-2.0-0.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libglib-2.0-0.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libgmodule-2.0-0.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libgmp-10.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libgnutls-30.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libgobject-2.0-0.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libgtk-3-0.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libharfbuzz-0.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libhogweed-4.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libidn2-0.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libintl-8.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libjpeg-8.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/liblzo2-2.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libncursesw6.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libnettle-6.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libnghttp2-14.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libp11-kit-0.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libpango-1.0-0.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libpangocairo-1.0-0.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libpangoft2-1.0-0.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libpangowin32-1.0-0.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libpcre-1.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libpixman-1-0.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libpng16-16.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libssh2-1.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libtasn1-6.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libunistring-2.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libusb-1.0.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libusbredirparser-1.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/libzstd-1.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/SDL2.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/ssleay32.dll .
          cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/zlib1.dll .
        shell: sh
      - name: Compress QEMU Raspberry Pi for Windows
        if: steps.qemu-rpi-build-win64.outputs.cache-hit != 'true'
        run: cd qemu_rpi/build && tar c qemu-system-aarch64.exe *.dll | xz -T $(nproc) > qemu-system-aarch64-win64.tar.xz
        shell: sh
      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: qemu-system-aarch64.exe
          path: qemu_rpi/build/qemu-system-aarch64-win64.tar.xz
  build_rpi_image:
    name: Build Raspberry Pi SD Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Cache Raspberry Pi SD Image
        id: rpi-sd-image
        uses: actions/cache@v2
        with:
          path: rpi/sd_image/raspi_alphabot.tar.xz
          key: ${{ runner.os }}-${{ secrets.CACHE_VERSION }}-${{ hashFiles('rpi') }}
      - name: Setup Docker
        if: steps.rpi-sd-image.outputs.cache-hit != 'true'
        uses: docker-practice/actions-setup-docker@v1
      - name: Install tools
        if: steps.rpi-sd-image.outputs.cache-hit != 'true'
        run: sudo apt-get install kpartx parted
      - name: Build Image
        if: steps.rpi-sd-image.outputs.cache-hit != 'true'
        run: sudo rpi/sd_image/build.sh
        shell: sh
      - name: Compress artifacts
        if: steps.rpi-sd-image.outputs.cache-hit != 'true'
        run: cd rpi/sd_image && tar c raspi_alphabot.img vmlinuz-*-arm64 initrd.img bcm2837-rpi-*.dtb | xz -T $(nproc) > raspi_alphabot.tar.xz
        shell: sh
      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: raspi_alphabot.img
          path: rpi/sd_image/raspi_alphabot.tar.xz
  test_rpi:
    name: Test Raspberry Pi
    needs: [build_qemu_rpi, build_rpi_image]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Download QEMU artifact
        uses: actions/download-artifact@v2
        with:
          name: qemu-system-aarch64
          path: qemu_rpi/build/
      - name: Decompress QEMU artifact
        run: xz --decompress qemu_rpi/build/qemu-system-aarch64.xz
        shell: sh
      - name: Download Raspberry Pi SD Image artifact
        uses: actions/download-artifact@v2
        with:
          name: raspi_alphabot.img
          path: rpi/sd_image/
      - name: Decompress Raspberry Pi SD Image artifact
        run: tar -xf rpi/sd_image/raspi_alphabot.tar.xz -C rpi/sd_image && rm rpi/sd_image/raspi_alphabot.tar.xz
        shell: sh
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.6"
      - name: Install Python modules
        run: pip install colorama
      - name: Run emulator with all tests
        run: |
          chmod +x qemu_rpi/build/qemu-system-aarch64
          python3 emulator_rpi.py --headless --test-all --auto-exit
        shell: sh
  build_positioning_anchor_image:
    name: Build Positioning Anchor Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Cache Positioning Anchor Image
        id: positioning-anchor-image
        uses: actions/cache@v2
        with:
          path: positioning_anchor/.pio/build/pro16MHzatmega328/firmware.hex
          key: ${{ runner.os }}-${{ secrets.CACHE_VERSION }}-${{ hashFiles('positioning_anchor') }}
      - name: Setup Python
        if: steps.positioning-anchor-image.outputs.cache-hit != 'true'
        uses: actions/setup-python@v2
      - name: Install PlatformIO
        if: steps.positioning-anchor-image.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio
      - name: Build Image
        if: steps.positioning-anchor-image.outputs.cache-hit != 'true'
        run: cd positioning_anchor && pio run
        shell: sh
      - name: Archive artifact
        uses: actions/upload-artifact@v2
        with:
          name: positioning_anchor_firmware.hex
          path: positioning_anchor/.pio/build/pro16MHzatmega328/firmware.hex
  build_positioning_tag_image:
    name: Build Positioning Tag Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Cache Positioning Tag Image
        id: positioning-tag-image
        uses: actions/cache@v2
        with:
          path: positioning_tag/.pio/build/pro16MHzatmega328/firmware.hex
          key: ${{ runner.os }}-${{ secrets.CACHE_VERSION }}-${{ hashFiles('positioning_tag') }}
      - name: Setup Python
        if: steps.positioning-tag-image.outputs.cache-hit != 'true'
        uses: actions/setup-python@v2
      - name: Install PlatformIO
        if: steps.positioning-tag-image.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio
      - name: Build Image
        if: steps.positioning-tag-image.outputs.cache-hit != 'true'
        run: cd positioning_tag && pio run
        shell: sh
      - name: Archive artifact
        uses: actions/upload-artifact@v2
        with:
          name: positioning_tag_firmware.hex
          path: positioning_tag/.pio/build/pro16MHzatmega328/firmware.hex
  build_esp32_primary_image:
    name: Build ESP32 Primary Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Cache ESP32 Primary Image
        id: esp32-primary-image
        uses: actions/cache@v2
        with:
          path: esp32/PrimaryESP32/.pio/build/esp32dev/firmware.bin
          key: ${{ runner.os }}-${{ secrets.CACHE_VERSION }}-${{ hashFiles('esp32/PrimaryESP32') }}
      - name: Setup Python
        if: steps.esp32-primary-image.outputs.cache-hit != 'true'
        uses: actions/setup-python@v2
      - name: Install PlatformIO
        if: steps.esp32-primary-image.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio
      - name: Build Image
        if: steps.esp32-primary-image.outputs.cache-hit != 'true'
        run: cd esp32/PrimaryESP32 && pio run
        shell: sh
      - name: Archive artifact
        uses: actions/upload-artifact@v2
        with:
          name: esp32_primary_firmware.bin
          path: esp32/PrimaryESP32/.pio/build/esp32dev/firmware.bin
  build_esp32_secondary_image:
    name: Build ESP32 Secondary Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Cache ESP32 Secondary Image
        id: esp32-secondary-image
        uses: actions/cache@v2
        with:
          path: esp32/SecondaryESP32/.pio/build/esp32dev/firmware.bin
          key: ${{ runner.os }}-${{ secrets.CACHE_VERSION }}-${{ hashFiles('esp32/SecondaryESP32') }}
      - name: Setup Python
        if: steps.esp32-secondary-image.outputs.cache-hit != 'true'
        uses: actions/setup-python@v2
      - name: Install PlatformIO
        if: steps.esp32-secondary-image.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio
      - name: Build Image
        if: steps.esp32-secondary-image.outputs.cache-hit != 'true'
        run: cd esp32/SecondaryESP32 && pio run
        shell: sh
      - name: Archive artifact
        uses: actions/upload-artifact@v2
        with:
          name: esp32_secondary_firmware.bin
          path: esp32/SecondaryESP32/.pio/build/esp32dev/firmware.bin
  build_client_library:
    runs-on: windows-latest
    name: Build Client Library
    steps:
      - uses: actions/checkout@v2
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.403'
      - name: Build AlphabotClientLibrary
        run: |
          cd clients/AlphabotClientLibrary
          dotnet build AlphabotClientLibrary.Shared/AlphabotClientLibrary.Shared.csproj -c Release
          dotnet build AlphabotClientLibrary.Core/AlphabotClientLibrary.Core.csproj -c Release
          dotnet build AlphabotClientLibrary.Core.Tcp/AlphabotClientLibrary.Core.Tcp.csproj -c Release
      - name: Archive AlphabotClientLibrary.Shared artifact
        uses: actions/upload-artifact@v2
        with:
          name: AlphabotClientLibrary.Shared.dll
          path: clients/AlphabotClientLibrary/AlphabotClientLibrary.Shared/bin/Release/netstandard2.0/AlphabotClientLibrary.Shared.dll
      - name: Archive AlphabotClientLibrary.Core artifact
        uses: actions/upload-artifact@v2
        with:
          name: AlphabotClientLibrary.Core.dll
          path: clients/AlphabotClientLibrary/AlphabotClientLibrary.Core/bin/Release/netstandard2.0/AlphabotClientLibrary.Core.dll
      - name: Archive AlphabotClientLibrary.Core.Tcp artifact
        uses: actions/upload-artifact@v2
        with:
          name: AlphabotClientLibrary.Core.Tcp.dll
          path: clients/AlphabotClientLibrary/AlphabotClientLibrary.Core.Tcp/bin/Release/netstandard2.0/AlphabotClientLibrary.Core.Tcp.dll
  test_client_library:
    runs-on: windows-latest
    name: Test Client Library
    needs: [build_client_library]
    steps:
      - uses: actions/checkout@v2
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.403'
      - name: Download AlphabotClientLibrary.Shared artifact
        uses: actions/download-artifact@v2
        with:
          name: AlphabotClientLibrary.Shared.dll
          path: clients/AlphabotClientLibrary/AlphabotClientLibrary.Shared/bin/Release/netstandard2.0/
      - name: Download AlphabotClientLibrary.Core artifact
        uses: actions/download-artifact@v2
        with:
          name: AlphabotClientLibrary.Core.dll
          path: clients/AlphabotClientLibrary/AlphabotClientLibrary.Core/bin/Release/netstandard2.0/
      - name: Download AlphabotClientLibrary.Core.Tcp artifact
        uses: actions/download-artifact@v2
        with:
          name: AlphabotClientLibrary.Core.Tcp.dll
          path: clients/AlphabotClientLibrary/AlphabotClientLibrary.Core.Tcp/bin/Release/netstandard2.0/
      - name: Test AlphabotClientLibrary
        run: |
          cd clients/AlphabotClientLibrary
          dotnet test
  build_xamarin_client:
    runs-on: windows-latest
    name: Build Xamarin Client
    needs: [build_client_library]
    steps:
      - uses: actions/checkout@v2
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.1
      - name: Download AlphabotClientLibrary.Shared artifact
        uses: actions/download-artifact@v2
        with:
          name: AlphabotClientLibrary.Shared.dll
          path: clients/AlphabotClientLibrary/AlphabotClientLibrary.Core.Tcp/bin/Release/netstandard2.0/
      - name: Download AlphabotClientLibrary.Core artifact
        uses: actions/download-artifact@v2
        with:
          name: AlphabotClientLibrary.Core.dll
          path: clients/AlphabotClientLibrary/AlphabotClientLibrary.Core.Tcp/bin/Release/netstandard2.0/
      - name: Download AlphabotClientLibrary.Core.Tcp artifact
        uses: actions/download-artifact@v2
        with:
          name: AlphabotClientLibrary.Core.Tcp.dll
          path: clients/AlphabotClientLibrary/AlphabotClientLibrary.Core.Tcp/bin/Release/netstandard2.0/
      - name: Build XamarinClient Solution
        run: |
          cd clients/XamarinClient
          msbuild ./XamarinClient.sln /restore /p:Configuration=Release
